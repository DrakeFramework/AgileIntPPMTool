{"ast":null,"code":"/**\r\n * library used to talk to the back end\r\n */\nimport axios from \"axios\";\n/**\r\n * import the types to be used\r\n */\n\nimport { GET_ERRORS } from \"./types\";\nimport { connect } from \"http\";\nimport AddProject from \"../components/Project/AddProject\";\nimport $ from \"jquery\";\n\n$.postJSON = function (url, data, callback) {\n  return $.ajax({\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    type: \"POST\",\n    url: url,\n    data: JSON.stringify(data),\n    dataType: \"json\",\n    success: callback\n  });\n};\n/**\r\n * create var to hold the project es6 constant object def\r\n * async makes the dispatch asynchronous and when used with await it always returns a promise (js will wait until the promise is settled)\r\n *\r\n * returns a natural function\r\n */\n\n\nexport const createProject = (project, history) => async dispatch => {\n  try {\n    //res is server response\n    //take the history parameter from the component and push the dashboard to see the new render\n    //await makes it a promise\n    //const res = await axios.post(\"http://localhost:8080/api/project\", project);\n    await $.ajax({\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      type: \"POST\",\n      url: \"http://localhost:8080/api/project\",\n      data: {\n        project\n      },\n      contentType: \"application/json\",\n      dataType: \"json\",\n      success: function (data) {\n        alert(\"success\");\n      }\n    });\n    history.push(\"/dashboard\");\n  } catch (err) {\n    //if there is an error\n    //dispatch to GET_ERRORS reducer\n    //send with the response data to extract onto the form\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/dnelson/ideaProjects/PPMToolUdemyTutorial/ppmtool-react-client/src/actions/projectActions.js"],"names":["axios","GET_ERRORS","connect","AddProject","$","postJSON","url","data","callback","ajax","headers","Accept","type","JSON","stringify","dataType","success","createProject","project","history","dispatch","contentType","alert","push","err","payload","response"],"mappings":"AAAA;;;AAGA,OAAOA,KAAP,MAAkB,OAAlB;AACA;;;;AAGA,SAASC,UAAT,QAA2B,SAA3B;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,OAAOC,UAAP,MAAuB,kCAAvB;AACA,OAAOC,CAAP,MAAc,QAAd;;AAEAA,CAAC,CAACC,QAAF,GAAa,UAASC,GAAT,EAAcC,IAAd,EAAoBC,QAApB,EAA8B;AACzC,SAAOJ,CAAC,CAACK,IAAF,CAAO;AACZC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,kBADD;AAEP,sBAAgB;AAFT,KADG;AAKZC,IAAAA,IAAI,EAAE,MALM;AAMZN,IAAAA,GAAG,EAAEA,GANO;AAOZC,IAAAA,IAAI,EAAEM,IAAI,CAACC,SAAL,CAAeP,IAAf,CAPM;AAQZQ,IAAAA,QAAQ,EAAE,MARE;AASZC,IAAAA,OAAO,EAAER;AATG,GAAP,CAAP;AAWD,CAZD;AAcA;;;;;;;;AAMA,OAAO,MAAMS,aAAa,GAAG,CAACC,OAAD,EAAUC,OAAV,KAAsB,MAAMC,QAAN,IAAkB;AACnE,MAAI;AACF;AACA;AACA;AACA;AACA,UAAMhB,CAAC,CAACK,IAAF,CAAO;AACXC,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE,kBADD;AAEP,wBAAgB;AAFT,OADE;AAKXC,MAAAA,IAAI,EAAE,MALK;AAMXN,MAAAA,GAAG,EAAE,mCANM;AAOXC,MAAAA,IAAI,EAAE;AAAEW,QAAAA;AAAF,OAPK;AAQXG,MAAAA,WAAW,EAAE,kBARF;AASXN,MAAAA,QAAQ,EAAE,MATC;AAUXC,MAAAA,OAAO,EAAE,UAAST,IAAT,EAAe;AACtBe,QAAAA,KAAK,CAAC,SAAD,CAAL;AACD;AAZU,KAAP,CAAN;AAcAH,IAAAA,OAAO,CAACI,IAAR,CAAa,YAAb;AACD,GApBD,CAoBE,OAAOC,GAAP,EAAY;AACZ;AACA;AACA;AACAJ,IAAAA,QAAQ,CAAC;AACPR,MAAAA,IAAI,EAAEX,UADC;AAEPwB,MAAAA,OAAO,EAAED,GAAG,CAACE,QAAJ,CAAanB;AAFf,KAAD,CAAR;AAID;AACF,CA9BM","sourcesContent":["/**\r\n * library used to talk to the back end\r\n */\r\nimport axios from \"axios\";\r\n/**\r\n * import the types to be used\r\n */\r\nimport { GET_ERRORS } from \"./types\";\r\nimport { connect } from \"http\";\r\nimport AddProject from \"../components/Project/AddProject\";\r\nimport $ from \"jquery\";\r\n\r\n$.postJSON = function(url, data, callback) {\r\n  return $.ajax({\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    type: \"POST\",\r\n    url: url,\r\n    data: JSON.stringify(data),\r\n    dataType: \"json\",\r\n    success: callback\r\n  });\r\n};\r\n\r\n/**\r\n * create var to hold the project es6 constant object def\r\n * async makes the dispatch asynchronous and when used with await it always returns a promise (js will wait until the promise is settled)\r\n *\r\n * returns a natural function\r\n */\r\nexport const createProject = (project, history) => async dispatch => {\r\n  try {\r\n    //res is server response\r\n    //take the history parameter from the component and push the dashboard to see the new render\r\n    //await makes it a promise\r\n    //const res = await axios.post(\"http://localhost:8080/api/project\", project);\r\n    await $.ajax({\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      type: \"POST\",\r\n      url: \"http://localhost:8080/api/project\",\r\n      data: { project },\r\n      contentType: \"application/json\",\r\n      dataType: \"json\",\r\n      success: function(data) {\r\n        alert(\"success\");\r\n      }\r\n    });\r\n    history.push(\"/dashboard\");\r\n  } catch (err) {\r\n    //if there is an error\r\n    //dispatch to GET_ERRORS reducer\r\n    //send with the response data to extract onto the form\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: err.response.data\r\n    });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}