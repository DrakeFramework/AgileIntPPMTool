{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dnelson\\\\ideaProjects\\\\PPMToolUdemyTutorial\\\\ppmtool-react-client\\\\src\\\\components\\\\Project\\\\UpdateProject.js\";\nimport React, { Component } from \"react\"; //import the get project action to fill out the data\n\nimport { getProject, createProject } from \"../../actions/projectActions\"; //get the proptypes package to handle props\n\nimport PropTypes from \"prop-types\"; //get connect from react redux so we can wire routes\n\nimport { connect } from \"react-redux\"; //get the classnames  package for form validation (error fields)\n\nimport classnames from \"classnames\"; //rcc tab to auto create and then separate out the export\n//this component has to fetch and then route to update\n\nclass UpdateProject extends Component {\n  // set the state\n  //create constructor\n  constructor() {\n    super();\n    this.state = {\n      id: \"\",\n      projectIdentifier: \"\",\n      projectName: \"\",\n      description: \"\",\n      startDate: \"\",\n      endDate: \"\"\n    }; //bind the event\n\n    this.onChange = this.onChange.bind(this); //bind the submit\n\n    this.onSubmit = this.onSubmit.bind(this);\n  } //add life cycle hook for mounting the state\n\n\n  componentWillReceiveProps(nextProps) {\n    //create a const for the new props\n    const _nextProps$project = nextProps.project,\n          id = _nextProps$project.id,\n          projectIdentifier = _nextProps$project.projectIdentifier,\n          projectName = _nextProps$project.projectName,\n          description = _nextProps$project.description,\n          startDate = _nextProps$project.startDate,\n          endDate = _nextProps$project.endDate; //set the current state to the new props\n\n    this.setState({\n      id,\n      projectIdentifier,\n      projectName,\n      description,\n      startDate,\n      endDate\n    });\n  } //add the life cycle hook\n\n\n  componentDidMount() {\n    //extract the id from the params passed in through the \"get\" api call for fetch\n    const id = this.props.match.params.id; //pass the id from fetch and the history into the getProject\n    //now we can see our project object in the state (redux)\n\n    this.props.getProject(id, this.props.history);\n  } //on change event\n\n\n  onChange(e) {\n    //use the naming convention to wire it up\n    this.setState({\n      [e.target.name]: e.target.value\n    }); //\n  } //submit event\n\n\n  onSubmit(e) {\n    e.preventDefault();\n    const updateProject = {\n      id: this.state.id,\n      projectIdentifier: this.state.projectIdentifier,\n      projectName: this.state.projectName,\n      description: this.state.description,\n      startDate: this.state.startDate,\n      endDate: this.state.endDate\n    }; //pass on to createproject function\n\n    this.props.createProject(updateProject, this.props.history);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"project\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-md-8 m-auto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      className: \"display-4 text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Update Project form\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      className: classnames(\"form-control form-control-lg \", {\n        \"is-invalid\": errors.projectName\n      }),\n      placeholder: \"Project Name\",\n      name: \"projectName\",\n      value: this.state.projectName,\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      className: classnames(\"form-control form-control-lg \", {\n        \"is-invalid\": errors.projectIdentifier\n      }),\n      placeholder: \"Unique Project ID\",\n      disabled: true,\n      name: \"projectIdentifier\",\n      value: this.state.projectIdentifier,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"textarea\", {\n      className: classnames(\"form-control form-control-lg \", {\n        \"is-invalid\": errors.description\n      }),\n      placeholder: \"Project Description\",\n      name: \"description\",\n      value: this.state.description,\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    })), React.createElement(\"h6\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"Start Date\"), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"date\",\n      className: \"form-control form-control-lg\",\n      name: \"startDate\",\n      value: this.state.startDate,\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    })), React.createElement(\"h6\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Estimated End Date\"), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"date\",\n      className: \"form-control form-control-lg\",\n      name: \"endDate\",\n      value: this.state.endDate,\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    })), React.createElement(\"input\", {\n      type: \"submit\",\n      className: \"btn btn-primary btn-block mt-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }))))));\n  }\n\n} //add proptypes\n\n\nUpdateProject.propTypes = {\n  //get project function mapped to proptype\n  getProject: PropTypes.func.isRequired,\n  createProject: PropTypes.func.isRequired,\n  project: PropTypes.object.isRequired\n}; //map the state to props\n\nconst mapStateToProps = state => ({\n  project: state.project.project\n}); //connect to getProject\n\n\nexport default connect(mapStateToProps, {\n  getProject,\n  createProject\n})(UpdateProject);","map":{"version":3,"sources":["C:/Users/dnelson/ideaProjects/PPMToolUdemyTutorial/ppmtool-react-client/src/components/Project/UpdateProject.js"],"names":["React","Component","getProject","createProject","PropTypes","connect","classnames","UpdateProject","constructor","state","id","projectIdentifier","projectName","description","startDate","endDate","onChange","bind","onSubmit","componentWillReceiveProps","nextProps","project","setState","componentDidMount","props","match","params","history","e","target","name","value","preventDefault","updateProject","render","errors","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\n//import the get project action to fill out the data\r\nimport { getProject, createProject } from \"../../actions/projectActions\";\r\n//get the proptypes package to handle props\r\nimport PropTypes from \"prop-types\";\r\n//get connect from react redux so we can wire routes\r\nimport { connect } from \"react-redux\";\r\n//get the classnames  package for form validation (error fields)\r\nimport classnames from \"classnames\";\r\n\r\n//rcc tab to auto create and then separate out the export\r\n//this component has to fetch and then route to update\r\nclass UpdateProject extends Component {\r\n  // set the state\r\n  //create constructor\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      id: \"\",\r\n      projectIdentifier: \"\",\r\n      projectName: \"\",\r\n      description: \"\",\r\n      startDate: \"\",\r\n      endDate: \"\"\r\n    };\r\n    //bind the event\r\n    this.onChange = this.onChange.bind(this);\r\n    //bind the submit\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n  }\r\n\r\n  //add life cycle hook for mounting the state\r\n  componentWillReceiveProps(nextProps) {\r\n    //create a const for the new props\r\n    const {\r\n      id,\r\n      projectIdentifier,\r\n      projectName,\r\n      description,\r\n      startDate,\r\n      endDate\r\n    } = nextProps.project;\r\n    //set the current state to the new props\r\n    this.setState({\r\n      id,\r\n      projectIdentifier,\r\n      projectName,\r\n      description,\r\n      startDate,\r\n      endDate\r\n    });\r\n  }\r\n\r\n  //add the life cycle hook\r\n  componentDidMount() {\r\n    //extract the id from the params passed in through the \"get\" api call for fetch\r\n    const { id } = this.props.match.params;\r\n    //pass the id from fetch and the history into the getProject\r\n    //now we can see our project object in the state (redux)\r\n    this.props.getProject(id, this.props.history);\r\n  }\r\n\r\n  //on change event\r\n  onChange(e) {\r\n    //use the naming convention to wire it up\r\n    this.setState({ [e.target.name]: e.target.value });\r\n    //\r\n  }\r\n  //submit event\r\n  onSubmit(e) {\r\n    e.preventDefault();\r\n    const updateProject = {\r\n      id: this.state.id,\r\n      projectIdentifier: this.state.projectIdentifier,\r\n      projectName: this.state.projectName,\r\n      description: this.state.description,\r\n      startDate: this.state.startDate,\r\n      endDate: this.state.endDate\r\n    };\r\n    //pass on to createproject function\r\n    this.props.createProject(updateProject, this.props.history);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"project\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-8 m-auto\">\r\n              <h5 className=\"display-4 text-center\">Update Project form</h5>\r\n              <hr />\r\n              {/* bind  */}\r\n              <form onSubmit={this.onSubmit}>\r\n                <div className=\"form-group\">\r\n                  {/* this is wired from state to value of the field for updating */}\r\n                  <input\r\n                    type=\"text\"\r\n                    className={classnames(\"form-control form-control-lg \", {\r\n                      \"is-invalid\": errors.projectName\r\n                    })}\r\n                    placeholder=\"Project Name\"\r\n                    name=\"projectName\"\r\n                    value={this.state.projectName}\r\n                    onChange={this.onChange}\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    type=\"text\"\r\n                    className={classnames(\"form-control form-control-lg \", {\r\n                      \"is-invalid\": errors.projectIdentifier\r\n                    })}\r\n                    placeholder=\"Unique Project ID\"\r\n                    disabled\r\n                    name=\"projectIdentifier\"\r\n                    value={this.state.projectIdentifier}\r\n                  />\r\n                </div>\r\n                {/*<!-- disabled for Edit Only!! remove \"disabled\" for the Create operation -->*/}\r\n                <div className=\"form-group\">\r\n                  <textarea\r\n                    className={classnames(\"form-control form-control-lg \", {\r\n                      \"is-invalid\": errors.description\r\n                    })}\r\n                    placeholder=\"Project Description\"\r\n                    name=\"description\"\r\n                    value={this.state.description}\r\n                    onChange={this.onChange}\r\n                  ></textarea>\r\n                </div>\r\n                <h6>Start Date</h6>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    type=\"date\"\r\n                    className=\"form-control form-control-lg\"\r\n                    name=\"startDate\"\r\n                    value={this.state.startDate}\r\n                    onChange={this.onChange}\r\n                  />\r\n                </div>\r\n                <h6>Estimated End Date</h6>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    type=\"date\"\r\n                    className=\"form-control form-control-lg\"\r\n                    name=\"endDate\"\r\n                    value={this.state.endDate}\r\n                    onChange={this.onChange}\r\n                  />\r\n                </div>\r\n\r\n                <input\r\n                  type=\"submit\"\r\n                  className=\"btn btn-primary btn-block mt-4\"\r\n                />\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//add proptypes\r\nUpdateProject.propTypes = {\r\n  //get project function mapped to proptype\r\n  getProject: PropTypes.func.isRequired,\r\n  createProject: PropTypes.func.isRequired,\r\n  project: PropTypes.object.isRequired\r\n};\r\n\r\n//map the state to props\r\nconst mapStateToProps = state => ({\r\n  project: state.project.project\r\n});\r\n\r\n//connect to getProject\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getProject, createProject }\r\n)(UpdateProject);\r\n"]},"metadata":{},"sourceType":"module"}