{"ast":null,"code":"/**\r\n * library used to talk to the back end\r\n */\nimport axios from \"axios\";\n/**\r\n * import the types to be used\r\n */\n\nimport { GET_ERRORS } from \"./types\";\nimport { connect } from \"http\";\nimport AddProject from \"../components/Project/AddProject\";\nimport $ from \"jquery\";\nimport { success } from \"jquery\";\nimport { dataType } from \"jquery\";\n/**\r\n * create var to hold the project es6 constant object def\r\n * async makes the dispatch asynchronous and when used with await it always returns a promise (js will wait until the promise is settled)\r\n *\r\n * returns a natural function\r\n */\n\nexport const createProject = (project, history) => async dispatch => {\n  try {\n    //res is server response\n    //take the history parameter from the component and push the dashboard to see the new render\n    //const res = await axios.post(\"http://localhost:8080/api/project\", project);\n    alert(JSON.stringify(project));\n    await $.ajax({\n      URL: \"http://localhost:8080/api/project\",\n      data: JSON.stringify(project),\n      dataType: \"json\",\n      type: \"POST\",\n      success: function (msg) {\n        alert(msg);\n      }\n    });\n  } catch (err) {\n    //if there is an error\n    //dispatch to GET_ERRORS reducer\n    //send with the response data to extract onto the form\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/dnelson/ideaProjects/PPMToolUdemyTutorial/ppmtool-react-client/src/actions/projectActions.js"],"names":["axios","GET_ERRORS","connect","AddProject","$","success","dataType","createProject","project","history","dispatch","alert","JSON","stringify","ajax","URL","data","type","msg","err","payload","response"],"mappings":"AAAA;;;AAGA,OAAOA,KAAP,MAAkB,OAAlB;AACA;;;;AAGA,SAASC,UAAT,QAA2B,SAA3B;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,OAAOC,UAAP,MAAuB,kCAAvB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,SAASC,QAAT,QAAyB,QAAzB;AAEA;;;;;;;AAMA,OAAO,MAAMC,aAAa,GAAG,CAACC,OAAD,EAAUC,OAAV,KAAsB,MAAMC,QAAN,IAAkB;AACnE,MAAI;AACF;AACA;AACA;AACAC,IAAAA,KAAK,CAACC,IAAI,CAACC,SAAL,CAAeL,OAAf,CAAD,CAAL;AACA,UAAMJ,CAAC,CAACU,IAAF,CAAO;AACXC,MAAAA,GAAG,EAAE,mCADM;AAEXC,MAAAA,IAAI,EAAEJ,IAAI,CAACC,SAAL,CAAeL,OAAf,CAFK;AAGXF,MAAAA,QAAQ,EAAE,MAHC;AAIXW,MAAAA,IAAI,EAAE,MAJK;AAKXZ,MAAAA,OAAO,EAAE,UAASa,GAAT,EAAc;AACrBP,QAAAA,KAAK,CAACO,GAAD,CAAL;AACD;AAPU,KAAP,CAAN;AASD,GAdD,CAcE,OAAOC,GAAP,EAAY;AACZ;AACA;AACA;AACAT,IAAAA,QAAQ,CAAC;AACPO,MAAAA,IAAI,EAAEhB,UADC;AAEPmB,MAAAA,OAAO,EAAED,GAAG,CAACE,QAAJ,CAAaL;AAFf,KAAD,CAAR;AAID;AACF,CAxBM","sourcesContent":["/**\r\n * library used to talk to the back end\r\n */\r\nimport axios from \"axios\";\r\n/**\r\n * import the types to be used\r\n */\r\nimport { GET_ERRORS } from \"./types\";\r\nimport { connect } from \"http\";\r\nimport AddProject from \"../components/Project/AddProject\";\r\nimport $ from \"jquery\";\r\nimport { success } from \"jquery\";\r\nimport { dataType } from \"jquery\";\r\n\r\n/**\r\n * create var to hold the project es6 constant object def\r\n * async makes the dispatch asynchronous and when used with await it always returns a promise (js will wait until the promise is settled)\r\n *\r\n * returns a natural function\r\n */\r\nexport const createProject = (project, history) => async dispatch => {\r\n  try {\r\n    //res is server response\r\n    //take the history parameter from the component and push the dashboard to see the new render\r\n    //const res = await axios.post(\"http://localhost:8080/api/project\", project);\r\n    alert(JSON.stringify(project));\r\n    await $.ajax({\r\n      URL: \"http://localhost:8080/api/project\",\r\n      data: JSON.stringify(project),\r\n      dataType: \"json\",\r\n      type: \"POST\",\r\n      success: function(msg) {\r\n        alert(msg);\r\n      }\r\n    });\r\n  } catch (err) {\r\n    //if there is an error\r\n    //dispatch to GET_ERRORS reducer\r\n    //send with the response data to extract onto the form\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: err.response.data\r\n    });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}