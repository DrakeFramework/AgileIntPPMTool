{"ast":null,"code":"/**\r\n * library used to talk to the back end\r\n */\nimport axios from \"axios\";\n/**\r\n * import the types to be used\r\n */\n\nimport { GET_ERRORS } from \"./types\";\nimport { connect } from \"http\";\nimport AddProject from \"../components/Project/AddProject\";\nimport $ from \"jquery\";\n/**\r\n * create var to hold the project es6 constant object def\r\n * async makes the dispatch asynchronous and when used with await it always returns a promise (js will wait until the promise is settled)\r\n *\r\n * returns a natural function\r\n */\n\nexport const createProject = (project, history) => async dispatch => {\n  try {\n    //res is server response\n    //take the history parameter from the component and push the dashboard to see the new render\n    //await makes it a promise\n    //const res = await axios.post(\"http://localhost:8080/api/project\", project);\n    // i will stick with his axios for now but I added a template postJson method to app.js because I'm skeptical\n    await $.postJSON(\"http://localhost:8080/api/project\", project, function (data) {\n      console.debug(\"Inserted: \" + data);\n    }, function (xhr, textStatus, errorThrown) {\n      alert(\"xhr : \" + xhr.responseText + \" status : \" + textStatus + \" error \" + errorThrown);\n    });\n    history.push(\"/dashboard\");\n  } catch (err) {\n    //if there is an error\n    //dispatch to GET_ERRORS reducer\n    //send with the response data to extract onto the form\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/dnelson/ideaProjects/PPMToolUdemyTutorial/ppmtool-react-client/src/actions/projectActions.js"],"names":["axios","GET_ERRORS","connect","AddProject","$","createProject","project","history","dispatch","postJSON","data","console","debug","xhr","textStatus","errorThrown","alert","responseText","push","err","type","payload","response"],"mappings":"AAAA;;;AAGA,OAAOA,KAAP,MAAkB,OAAlB;AACA;;;;AAGA,SAASC,UAAT,QAA2B,SAA3B;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,OAAOC,UAAP,MAAuB,kCAAvB;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA;;;;;;;AAMA,OAAO,MAAMC,aAAa,GAAG,CAACC,OAAD,EAAUC,OAAV,KAAsB,MAAMC,QAAN,IAAkB;AACnE,MAAI;AACF;AACA;AACA;AACA;AACA;AACA,UAAMJ,CAAC,CAACK,QAAF,CACJ,mCADI,EAEJH,OAFI,EAGJ,UAASI,IAAT,EAAe;AACbC,MAAAA,OAAO,CAACC,KAAR,CAAc,eAAeF,IAA7B;AACD,KALG,EAMJ,UAASG,GAAT,EAAcC,UAAd,EAA0BC,WAA1B,EAAuC;AACrCC,MAAAA,KAAK,CACH,WACEH,GAAG,CAACI,YADN,GAEE,YAFF,GAGEH,UAHF,GAIE,SAJF,GAKEC,WANC,CAAL;AAQD,KAfG,CAAN;AAiBAR,IAAAA,OAAO,CAACW,IAAR,CAAa,YAAb;AACD,GAxBD,CAwBE,OAAOC,GAAP,EAAY;AACZ;AACA;AACA;AACAX,IAAAA,QAAQ,CAAC;AACPY,MAAAA,IAAI,EAAEnB,UADC;AAEPoB,MAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaZ;AAFf,KAAD,CAAR;AAID;AACF,CAlCM","sourcesContent":["/**\r\n * library used to talk to the back end\r\n */\r\nimport axios from \"axios\";\r\n/**\r\n * import the types to be used\r\n */\r\nimport { GET_ERRORS } from \"./types\";\r\nimport { connect } from \"http\";\r\nimport AddProject from \"../components/Project/AddProject\";\r\nimport $ from \"jquery\";\r\n\r\n/**\r\n * create var to hold the project es6 constant object def\r\n * async makes the dispatch asynchronous and when used with await it always returns a promise (js will wait until the promise is settled)\r\n *\r\n * returns a natural function\r\n */\r\nexport const createProject = (project, history) => async dispatch => {\r\n  try {\r\n    //res is server response\r\n    //take the history parameter from the component and push the dashboard to see the new render\r\n    //await makes it a promise\r\n    //const res = await axios.post(\"http://localhost:8080/api/project\", project);\r\n    // i will stick with his axios for now but I added a template postJson method to app.js because I'm skeptical\r\n    await $.postJSON(\r\n      \"http://localhost:8080/api/project\",\r\n      project,\r\n      function(data) {\r\n        console.debug(\"Inserted: \" + data);\r\n      },\r\n      function(xhr, textStatus, errorThrown) {\r\n        alert(\r\n          \"xhr : \" +\r\n            xhr.responseText +\r\n            \" status : \" +\r\n            textStatus +\r\n            \" error \" +\r\n            errorThrown\r\n        );\r\n      }\r\n    );\r\n    history.push(\"/dashboard\");\r\n  } catch (err) {\r\n    //if there is an error\r\n    //dispatch to GET_ERRORS reducer\r\n    //send with the response data to extract onto the form\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: err.response.data\r\n    });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}