{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dnelson\\\\ideaProjects\\\\PPMToolUdemyTutorial\\\\ppmtool-react-client\\\\src\\\\components\\\\Project\\\\AddProject.js\";\nimport React, { Component } from \"react\"; //the props are used to hold page information properties\n//the router is what passes the props\n\nimport PropTypes from \"prop-types\"; //how we connect to the state\n\nimport { connect } from \"react-redux\"; //import the action component\n\nimport { createProject } from \"../../actions/projectActions\"; //import the new classnames for error handling\n\nimport classnames from \"classnames\";\n\nclass AddProject extends Component {\n  //create a constructor so the component can set default values\n  constructor() {\n    //constructor of components must call super() so it has the Component constructor functionality\n    super(); //sets the initial state for the input fields to blanks  (match the back end json attributes passed between js and java)\n\n    this.state = {\n      projectIdentifier: \"\",\n      projectName: \"\",\n      description: \"\",\n      startDate: \"\",\n      endDate: \"\",\n      errors: {}\n    }; //instead of binding it at every line do it int he constuctor\n\n    this.onChange = this.onChange.bind(this); //onsubmit must be bound to the form\n\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n  /**\r\n   *  //~~~~~//life cycle hooks//~~~~~//\r\n   * Called when the component may be receiving new props.\r\n   * React may call this even if props have not changed,\r\n   * so be sure to compare new and existing props if you only want to handle changes.\r\n   * @param {*} nextProps\r\n   */\n\n\n  componentWillReceiveProps(nextProps) {\n    //if the parameter has the errors property\n    if (nextProps.errors) {\n      //set the errors property to the current state\n      this.setState({\n        errors: nextProps.errors\n      });\n    }\n  } //page sending features\n\n  /**\r\n   * when values are set via initial state on change events are required\r\n   * @param {event parm} e\r\n   */\n\n\n  onChange(e) {\n    //single example this.setState({ projectName: e.target.value });\n    //use generics so it doesn't need to be done every time\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n  /**\r\n   * on submit calls the rest service to get the json object\r\n   * @param {event parm} e\r\n   */\n\n\n  onSubmit(e) {\n    //we do not want the page to refresh which is default for submit\n    e.preventDefault(); //create a new project json object using the state (current) values\n    //this object will be passed on to the server\n\n    const newProject = {\n      projectIdentifier: this.state.projectIdentifier,\n      projectName: this.state.projectName,\n      description: this.state.description,\n      startDate: this.state.startDate,\n      endDate: this.state.endDate\n    }; //pass the new json object and the history so we can route\n\n    this.props.createProject(newProject, this.props.history);\n  }\n\n  render() {\n    //on render set the errors constant to the state\n    //accessible from erros.projectName etc\n    const errors = this.state.errors;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"project\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-md-8 m-auto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      className: \"display-4 text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Create / Edit Project form\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      className: classnames(\"form-control form-control-lg \", {\n        \"is-invalid\": errors.projectName\n      }),\n      placeholder: \"Project Name\",\n      name: \"projectName\",\n      value: this.state.projectName,\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), errors.projectName && React.createElement(\"div\", {\n      className: \"invalid-feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, errors.projectName)), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      className: classnames(\"form-control form-control-lg \", {\n        \"is-invalid\": errors.projectIdentifier\n      }),\n      placeholder: \"Unique Project ID\",\n      name: \"projectIdentifier\",\n      value: this.state.projectIdentifier,\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }), errors.projectIdentifier && React.createElement(\"div\", {\n      className: \"invalid-feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, errors.projectIdentifier)), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(\"textarea\", {\n      className: classnames(\"form-control form-control-lg \", {\n        \"is-invalid\": errors.description\n      }),\n      placeholder: \"Project Description\",\n      name: \"description\",\n      onChange: this.onChange,\n      value: this.state.description,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }), errors.description && React.createElement(\"div\", {\n      className: \"invalid-feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, errors.description)), React.createElement(\"h6\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, \"Start Date\"), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"date\",\n      className: \"form-control form-control-lg\",\n      name: \"startDate\",\n      onChange: this.onChange,\n      value: this.state.startDate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    })), React.createElement(\"h6\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, \"Estimated End Date\"), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"date\",\n      className: \"form-control form-control-lg\",\n      name: \"endDate\",\n      value: this.state.endDate,\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    })), React.createElement(\"input\", {\n      type: \"submit\",\n      className: \"btn btn-primary btn-block mt-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    })))))));\n  }\n\n} // //setup the prop types for the action\n\n\nAddProject.propTypes = {\n  //the create project function is a required function of the proptypes\n  createProject: PropTypes.func.isRequired,\n  //map the errors object to the props when addproject is going\n  errors: PropTypes.object.isRequired\n}; //create a map from the state in the class to the props in the reducer (reducer/index.js)\n\nconst mapStateToProps = state => ({\n  errors: state.errors\n}); //change the state to use the connector\n//export default AddProject;\n//\n//this allows connecting to the state\n//TODO replace null with parameters\n//wire the action to the component\n\n\nexport default connect( //add this in\nmapStateToProps, {\n  createProject\n})(AddProject);","map":{"version":3,"sources":["C:/Users/dnelson/ideaProjects/PPMToolUdemyTutorial/ppmtool-react-client/src/components/Project/AddProject.js"],"names":["React","Component","PropTypes","connect","createProject","classnames","AddProject","constructor","state","projectIdentifier","projectName","description","startDate","endDate","errors","onChange","bind","onSubmit","componentWillReceiveProps","nextProps","setState","e","target","name","value","preventDefault","newProject","props","history","render","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\n//the props are used to hold page information properties\r\n//the router is what passes the props\r\nimport PropTypes from \"prop-types\";\r\n//how we connect to the state\r\nimport { connect } from \"react-redux\";\r\n//import the action component\r\nimport { createProject } from \"../../actions/projectActions\";\r\n//import the new classnames for error handling\r\nimport classnames from \"classnames\";\r\n\r\nclass AddProject extends Component {\r\n  //create a constructor so the component can set default values\r\n  constructor() {\r\n    //constructor of components must call super() so it has the Component constructor functionality\r\n    super();\r\n\r\n    //sets the initial state for the input fields to blanks  (match the back end json attributes passed between js and java)\r\n    this.state = {\r\n      projectIdentifier: \"\",\r\n      projectName: \"\",\r\n      description: \"\",\r\n      startDate: \"\",\r\n      endDate: \"\",\r\n      errors: {}\r\n    };\r\n\r\n    //instead of binding it at every line do it int he constuctor\r\n    this.onChange = this.onChange.bind(this);\r\n    //onsubmit must be bound to the form\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n  }\r\n\r\n  /**\r\n   *  //~~~~~//life cycle hooks//~~~~~//\r\n   * Called when the component may be receiving new props.\r\n   * React may call this even if props have not changed,\r\n   * so be sure to compare new and existing props if you only want to handle changes.\r\n   * @param {*} nextProps\r\n   */\r\n  componentWillReceiveProps(nextProps) {\r\n    //if the parameter has the errors property\r\n    if (nextProps.errors) {\r\n      //set the errors property to the current state\r\n      this.setState({ errors: nextProps.errors });\r\n    }\r\n  }\r\n\r\n  //page sending features\r\n\r\n  /**\r\n   * when values are set via initial state on change events are required\r\n   * @param {event parm} e\r\n   */\r\n  onChange(e) {\r\n    //single example this.setState({ projectName: e.target.value });\r\n    //use generics so it doesn't need to be done every time\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  /**\r\n   * on submit calls the rest service to get the json object\r\n   * @param {event parm} e\r\n   */\r\n  onSubmit(e) {\r\n    //we do not want the page to refresh which is default for submit\r\n    e.preventDefault();\r\n\r\n    //create a new project json object using the state (current) values\r\n    //this object will be passed on to the server\r\n    const newProject = {\r\n      projectIdentifier: this.state.projectIdentifier,\r\n      projectName: this.state.projectName,\r\n      description: this.state.description,\r\n      startDate: this.state.startDate,\r\n      endDate: this.state.endDate\r\n    };\r\n\r\n    //pass the new json object and the history so we can route\r\n    this.props.createProject(newProject, this.props.history);\r\n  }\r\n  render() {\r\n    //on render set the errors constant to the state\r\n    //accessible from erros.projectName etc\r\n    const { errors } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"project\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-8 m-auto\">\r\n                <h5 className=\"display-4 text-center\">\r\n                  Create / Edit Project form\r\n                </h5>\r\n                <hr />\r\n                {/* set up the on submit for the form and define above --remember to use \"this.\" when binding the functions to this one*/}\r\n                <form onSubmit={this.onSubmit}>\r\n                  <div className=\"form-group\">\r\n                    {/*the value of name must match the name of the field in the DAO so it can marshal json */}\r\n                    {/*check the state in the constructor to get initial value for a field */}\r\n                    {/*on change events are bound with --> onChange={this.onChange.bind(this)}*/}\r\n                    {/*use constructor for onchange*/}\r\n                    {/*first surround the bootstrap classes with {( xxx )} */}\r\n                    {/*this is cool because it can check for invalid and sets the browser field error */}\r\n                    <input\r\n                      type=\"text\"\r\n                      className={classnames(\"form-control form-control-lg \", {\r\n                        \"is-invalid\": errors.projectName\r\n                      })}\r\n                      placeholder=\"Project Name\"\r\n                      name=\"projectName\"\r\n                      value={this.state.projectName}\r\n                      onChange={this.onChange}\r\n                    />\r\n                    {/*add the bootstrap invalid feedback when the errors projectName is there*/}\r\n                    {errors.projectName && (\r\n                      <div className=\"invalid-feedback\">\r\n                        {errors.projectName}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  {/* idk why this was disabled */}\r\n                  <div className=\"form-group\">\r\n                    <input\r\n                      type=\"text\"\r\n                      className={classnames(\"form-control form-control-lg \", {\r\n                        \"is-invalid\": errors.projectIdentifier\r\n                      })}\r\n                      placeholder=\"Unique Project ID\"\r\n                      name=\"projectIdentifier\"\r\n                      value={this.state.projectIdentifier}\r\n                      onChange={this.onChange}\r\n                    />\r\n                    {/*add the bootstrap invalid feedback when the errors projectIdentifier is there*/}\r\n                    {errors.projectIdentifier && (\r\n                      <div className=\"invalid-feedback\">\r\n                        {errors.projectIdentifier}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  {/*<!-- disabled for Edit Only!! remove \"disabled\" for the Create operation -->*/}\r\n                  <div className=\"form-group\">\r\n                    <textarea\r\n                      className={classnames(\"form-control form-control-lg \", {\r\n                        \"is-invalid\": errors.description\r\n                      })}\r\n                      placeholder=\"Project Description\"\r\n                      name=\"description\"\r\n                      onChange={this.onChange}\r\n                      value={this.state.description}\r\n                    ></textarea>\r\n                    {/*add the bootstrap invalid feedback when the errors projectIdentifier is there*/}\r\n                    {errors.description && (\r\n                      <div className=\"invalid-feedback\">\r\n                        {errors.description}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  <h6>Start Date</h6>\r\n                  <div className=\"form-group\">\r\n                    <input\r\n                      type=\"date\"\r\n                      className=\"form-control form-control-lg\"\r\n                      name=\"startDate\"\r\n                      onChange={this.onChange}\r\n                      value={this.state.startDate}\r\n                    />\r\n                  </div>\r\n                  <h6>Estimated End Date</h6>\r\n                  <div className=\"form-group\">\r\n                    <input\r\n                      type=\"date\"\r\n                      className=\"form-control form-control-lg\"\r\n                      name=\"endDate\"\r\n                      value={this.state.endDate}\r\n                      onChange={this.onChange}\r\n                    />\r\n                  </div>\r\n\r\n                  <input\r\n                    type=\"submit\"\r\n                    className=\"btn btn-primary btn-block mt-4\"\r\n                  />\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// //setup the prop types for the action\r\nAddProject.propTypes = {\r\n  //the create project function is a required function of the proptypes\r\n  createProject: PropTypes.func.isRequired,\r\n  //map the errors object to the props when addproject is going\r\n  errors: PropTypes.object.isRequired\r\n};\r\n\r\n//create a map from the state in the class to the props in the reducer (reducer/index.js)\r\nconst mapStateToProps = state => ({\r\n  errors: state.errors\r\n});\r\n\r\n//change the state to use the connector\r\n//export default AddProject;\r\n//\r\n//this allows connecting to the state\r\n//TODO replace null with parameters\r\n//wire the action to the component\r\nexport default connect(\r\n  //add this in\r\n  mapStateToProps,\r\n  { createProject }\r\n)(AddProject);\r\n"]},"metadata":{},"sourceType":"module"}