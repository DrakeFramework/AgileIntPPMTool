{"ast":null,"code":"/**\r\n * library used to talk to the back end\r\n */\nimport axios from \"axios\";\n/**\r\n * import the types to be used\r\n */\n\nimport { GET_ERRORS, GET_PROJECTS, GET_PROJECT, DELETE_PROJECT } from \"./types\";\n/**\r\n * create var to hold the project es6 constant object def\r\n * async makes the dispatch asynchronous and when used with await it always returns a promise (js will wait until the promise is settled)\r\n *\r\n * returns a natural function\r\n */\n\nexport const createProject = (project, history) => async dispatch => {\n  // i will stick with his axios for now to learn new stuff but I think i still prefer jquery\n  // await $.postJSON(\n  //   \"http://localhost:8080/api/project\",\n  //   project,\n  //   function(data) {\n  //      history.push(\"/dashboard\");\n  //   },\n  //   function(xhr, textStatus, errorThrown) {\n  //      dispatch({\n  //        type: GET_ERRORS,\n  //        payload: JSON.parse(xhr.responseText)\n  //      });\n  //   }\n  // );\n  //this is the axios way of doing it\n  try {\n    //res is server response\n    //take the history parameter from the component and push the dashboard to see the new render\n    //await makes it a promise\n    const res = await axios.post(\"http://localhost:8080/api/project\", project);\n    history.push(\"/dashboard\"); //when we have a good post without exception then just wipe out the errors\n\n    dispatch({\n      type: GET_ERRORS,\n      payload: {}\n    });\n  } catch (err) {\n    //if there is an error\n    //dispatch to GET_ERRORS reducer\n    //send with the response data to extract onto the form\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  }\n};\n/**\r\n * basically the same as the post from above but with an axios \"get\" call which makes it much simpler\r\n * TODO research how parameters are passed in axios\r\n */\n\nexport const getProjects = () => async dispatch => {\n  const res = await axios.get(\"http://localhost:8080/api/project/all\");\n  dispatch({\n    type: GET_PROJECTS,\n    payload: res.data\n  });\n};\n/**\r\n * get a single fetch of project in the same pattern\r\n * this time take the id and history so we can control route on errors\r\n */\n\nexport const getProject = (id, history) => async dispatch => {\n  try {\n    //use backticks so we can map the id parameter onto the link\n    const res = await axios.get(\"http://localhost:8080/api/project/\".concat(id));\n    dispatch({\n      type: GET_PROJECT,\n      payload: res.data\n    });\n  } catch (err) {\n    history.push(\"/dashboard\");\n  }\n};\n/**\r\n * delete a project\r\n * because it's deleted from a list we can trust that it exists\r\n */\n\nexport const deleteProject = id => async dispatch => {\n  const res = await axios.delete(\"http://localhost:8080/api/project/\".concat(id));\n  dispatch({\n    type: DELETE_PROJECT,\n    payload: res.data\n  });\n};","map":{"version":3,"sources":["C:/Users/dnelson/ideaProjects/PPMToolUdemyTutorial/ppmtool-react-client/src/actions/projectActions.js"],"names":["axios","GET_ERRORS","GET_PROJECTS","GET_PROJECT","DELETE_PROJECT","createProject","project","history","dispatch","res","post","push","type","payload","err","response","data","getProjects","get","getProject","id","deleteProject","delete"],"mappings":"AAAA;;;AAGA,OAAOA,KAAP,MAAkB,OAAlB;AACA;;;;AAGA,SAASC,UAAT,EAAqBC,YAArB,EAAmCC,WAAnC,EAAgDC,cAAhD,QAAsE,SAAtE;AAEA;;;;;;;AAMA,OAAO,MAAMC,aAAa,GAAG,CAACC,OAAD,EAAUC,OAAV,KAAsB,MAAMC,QAAN,IAAkB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,MAAI;AACF;AACA;AACA;AACA,UAAMC,GAAG,GAAG,MAAMT,KAAK,CAACU,IAAN,CAAW,mCAAX,EAAgDJ,OAAhD,CAAlB;AACAC,IAAAA,OAAO,CAACI,IAAR,CAAa,YAAb,EALE,CAMF;;AACAH,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAEX,UADC;AAEPY,MAAAA,OAAO,EAAE;AAFF,KAAD,CAAR;AAID,GAXD,CAWE,OAAOC,GAAP,EAAY;AACZ;AACA;AACA;AACAN,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAEX,UADC;AAEPY,MAAAA,OAAO,EAAEC,GAAG,CAACC,QAAJ,CAAaC;AAFf,KAAD,CAAR;AAID;AACF,CArCM;AAuCP;;;;;AAIA,OAAO,MAAMC,WAAW,GAAG,MAAM,MAAMT,QAAN,IAAkB;AACjD,QAAMC,GAAG,GAAG,MAAMT,KAAK,CAACkB,GAAN,CAAU,uCAAV,CAAlB;AACAV,EAAAA,QAAQ,CAAC;AACPI,IAAAA,IAAI,EAAEV,YADC;AAEPW,IAAAA,OAAO,EAAEJ,GAAG,CAACO;AAFN,GAAD,CAAR;AAID,CANM;AAQP;;;;;AAIA,OAAO,MAAMG,UAAU,GAAG,CAACC,EAAD,EAAKb,OAAL,KAAiB,MAAMC,QAAN,IAAkB;AAC3D,MAAI;AACF;AACA,UAAMC,GAAG,GAAG,MAAMT,KAAK,CAACkB,GAAN,6CAA+CE,EAA/C,EAAlB;AACAZ,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAET,WADC;AAEPU,MAAAA,OAAO,EAAEJ,GAAG,CAACO;AAFN,KAAD,CAAR;AAID,GAPD,CAOE,OAAOF,GAAP,EAAY;AACZP,IAAAA,OAAO,CAACI,IAAR,CAAa,YAAb;AACD;AACF,CAXM;AAaP;;;;;AAIA,OAAO,MAAMU,aAAa,GAAGD,EAAE,IAAI,MAAMZ,QAAN,IAAkB;AACnD,QAAMC,GAAG,GAAG,MAAMT,KAAK,CAACsB,MAAN,6CAAkDF,EAAlD,EAAlB;AACAZ,EAAAA,QAAQ,CAAC;AACPI,IAAAA,IAAI,EAAER,cADC;AAEPS,IAAAA,OAAO,EAAEJ,GAAG,CAACO;AAFN,GAAD,CAAR;AAID,CANM","sourcesContent":["/**\r\n * library used to talk to the back end\r\n */\r\nimport axios from \"axios\";\r\n/**\r\n * import the types to be used\r\n */\r\nimport { GET_ERRORS, GET_PROJECTS, GET_PROJECT, DELETE_PROJECT } from \"./types\";\r\n\r\n/**\r\n * create var to hold the project es6 constant object def\r\n * async makes the dispatch asynchronous and when used with await it always returns a promise (js will wait until the promise is settled)\r\n *\r\n * returns a natural function\r\n */\r\nexport const createProject = (project, history) => async dispatch => {\r\n  // i will stick with his axios for now to learn new stuff but I think i still prefer jquery\r\n  // await $.postJSON(\r\n  //   \"http://localhost:8080/api/project\",\r\n  //   project,\r\n  //   function(data) {\r\n  //      history.push(\"/dashboard\");\r\n  //   },\r\n  //   function(xhr, textStatus, errorThrown) {\r\n  //      dispatch({\r\n  //        type: GET_ERRORS,\r\n  //        payload: JSON.parse(xhr.responseText)\r\n  //      });\r\n  //   }\r\n  // );\r\n\r\n  //this is the axios way of doing it\r\n  try {\r\n    //res is server response\r\n    //take the history parameter from the component and push the dashboard to see the new render\r\n    //await makes it a promise\r\n    const res = await axios.post(\"http://localhost:8080/api/project\", project);\r\n    history.push(\"/dashboard\");\r\n    //when we have a good post without exception then just wipe out the errors\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: {}\r\n    });\r\n  } catch (err) {\r\n    //if there is an error\r\n    //dispatch to GET_ERRORS reducer\r\n    //send with the response data to extract onto the form\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: err.response.data\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * basically the same as the post from above but with an axios \"get\" call which makes it much simpler\r\n * TODO research how parameters are passed in axios\r\n */\r\nexport const getProjects = () => async dispatch => {\r\n  const res = await axios.get(\"http://localhost:8080/api/project/all\");\r\n  dispatch({\r\n    type: GET_PROJECTS,\r\n    payload: res.data\r\n  });\r\n};\r\n\r\n/**\r\n * get a single fetch of project in the same pattern\r\n * this time take the id and history so we can control route on errors\r\n */\r\nexport const getProject = (id, history) => async dispatch => {\r\n  try {\r\n    //use backticks so we can map the id parameter onto the link\r\n    const res = await axios.get(`http://localhost:8080/api/project/${id}`);\r\n    dispatch({\r\n      type: GET_PROJECT,\r\n      payload: res.data\r\n    });\r\n  } catch (err) {\r\n    history.push(\"/dashboard\");\r\n  }\r\n};\r\n\r\n/**\r\n * delete a project\r\n * because it's deleted from a list we can trust that it exists\r\n */\r\nexport const deleteProject = id => async dispatch => {\r\n  const res = await axios.delete(`http://localhost:8080/api/project/${id}`);\r\n  dispatch({\r\n    type: DELETE_PROJECT,\r\n    payload: res.data\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}