{"ast":null,"code":"/**\r\n * library used to talk to the back end\r\n */\nimport axios from \"axios\";\n/**\r\n * import the types to be used\r\n */\n\nimport { GET_ERRORS, GET_PROJECTS } from \"./types\";\nimport { connect } from \"http\";\nimport AddProject from \"../components/Project/AddProject\";\n/**\r\n * create var to hold the project es6 constant object def\r\n * async makes the dispatch asynchronous and when used with await it always returns a promise (js will wait until the promise is settled)\r\n *\r\n * returns a natural function\r\n */\n\nexport const createProject = (project, history) => async dispatch => {\n  // i will stick with his axios for now to learn new stuff but I think i still prefer jquery\n  // await $.postJSON(\n  //   \"http://localhost:8080/api/project\",\n  //   project,\n  //   function(data) {\n  //      history.push(\"/dashboard\");\n  //   },\n  //   function(xhr, textStatus, errorThrown) {\n  //      dispatch({\n  //        type: GET_ERRORS,\n  //        payload: JSON.parse(xhr.responseText)\n  //      });\n  //   }\n  // );\n  //this is the axios way of doing it\n  try {\n    //res is server response\n    //take the history parameter from the component and push the dashboard to see the new render\n    //await makes it a promise\n    const res = await axios.post(\"http://localhost:8080/api/project\", project);\n    history.push(\"/dashboard\");\n  } catch (err) {\n    //if there is an error\n    //dispatch to GET_ERRORS reducer\n    //send with the response data to extract onto the form\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  }\n};\n/**\r\n * basically the same as the post from above\r\n */\n\nexport const getProjects = () => async dispatch => {\n  const res = await axios.get(\"http://localhost:8080/api/project/all\");\n  dispatch({\n    type: GET_PROJECTS,\n    payload: res.data\n  });\n};","map":{"version":3,"sources":["C:/Users/dnelson/ideaProjects/PPMToolUdemyTutorial/ppmtool-react-client/src/actions/projectActions.js"],"names":["axios","GET_ERRORS","GET_PROJECTS","connect","AddProject","createProject","project","history","dispatch","res","post","push","err","type","payload","response","data","getProjects","get"],"mappings":"AAAA;;;AAGA,OAAOA,KAAP,MAAkB,OAAlB;AACA;;;;AAGA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,SAAzC;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,OAAOC,UAAP,MAAuB,kCAAvB;AAEA;;;;;;;AAMA,OAAO,MAAMC,aAAa,GAAG,CAACC,OAAD,EAAUC,OAAV,KAAsB,MAAMC,QAAN,IAAkB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,MAAI;AACF;AACA;AACA;AACA,UAAMC,GAAG,GAAG,MAAMT,KAAK,CAACU,IAAN,CAAW,mCAAX,EAAgDJ,OAAhD,CAAlB;AACAC,IAAAA,OAAO,CAACI,IAAR,CAAa,YAAb;AACD,GAND,CAME,OAAOC,GAAP,EAAY;AACZ;AACA;AACA;AACAJ,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEZ,UADC;AAEPa,MAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,KAAD,CAAR;AAID;AACF,CAhCM;AAkCP;;;;AAGA,OAAO,MAAMC,WAAW,GAAG,MAAM,MAAMT,QAAN,IAAkB;AACjD,QAAMC,GAAG,GAAG,MAAMT,KAAK,CAACkB,GAAN,CAAU,uCAAV,CAAlB;AACAV,EAAAA,QAAQ,CAAC;AACPK,IAAAA,IAAI,EAAEX,YADC;AAEPY,IAAAA,OAAO,EAAEL,GAAG,CAACO;AAFN,GAAD,CAAR;AAID,CANM","sourcesContent":["/**\r\n * library used to talk to the back end\r\n */\r\nimport axios from \"axios\";\r\n/**\r\n * import the types to be used\r\n */\r\nimport { GET_ERRORS, GET_PROJECTS } from \"./types\";\r\nimport { connect } from \"http\";\r\nimport AddProject from \"../components/Project/AddProject\";\r\n\r\n/**\r\n * create var to hold the project es6 constant object def\r\n * async makes the dispatch asynchronous and when used with await it always returns a promise (js will wait until the promise is settled)\r\n *\r\n * returns a natural function\r\n */\r\nexport const createProject = (project, history) => async dispatch => {\r\n  // i will stick with his axios for now to learn new stuff but I think i still prefer jquery\r\n  // await $.postJSON(\r\n  //   \"http://localhost:8080/api/project\",\r\n  //   project,\r\n  //   function(data) {\r\n  //      history.push(\"/dashboard\");\r\n  //   },\r\n  //   function(xhr, textStatus, errorThrown) {\r\n  //      dispatch({\r\n  //        type: GET_ERRORS,\r\n  //        payload: JSON.parse(xhr.responseText)\r\n  //      });\r\n  //   }\r\n  // );\r\n\r\n  //this is the axios way of doing it\r\n  try {\r\n    //res is server response\r\n    //take the history parameter from the component and push the dashboard to see the new render\r\n    //await makes it a promise\r\n    const res = await axios.post(\"http://localhost:8080/api/project\", project);\r\n    history.push(\"/dashboard\");\r\n  } catch (err) {\r\n    //if there is an error\r\n    //dispatch to GET_ERRORS reducer\r\n    //send with the response data to extract onto the form\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: err.response.data\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * basically the same as the post from above\r\n */\r\nexport const getProjects = () => async dispatch => {\r\n  const res = await axios.get(\"http://localhost:8080/api/project/all\");\r\n  dispatch({\r\n    type: GET_PROJECTS,\r\n    payload: res.data\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}